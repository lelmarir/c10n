/*
 * Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rodionmoiseev.gradle.plugins:idea-utils:0.2'
    }
}

apply plugin: 'idea-utils'

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'
    javadoc.options.encoding = 'UTF-8'

    version = '1.3'
    archivesBaseName = 'c10n'
    group = 'com.github.rodionmoiseev.c10n'

    sourceCompatibility = '1.8'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    [compileJava, compileTestJava]*.options*.compilerArgs = ['-parameters']
    //[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']

    repositories {
        mavenCentral()
    }

    configurations {
        provided
        testCompile.extendsFrom provided
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile 'org.mockito:mockito-core:2.0.31-beta'
        testCompile 'com.google.guava:guava:18.0'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    signing {
        sign configurations.archives
    }

    ext.commonPom = { pom ->
        pom.project {
            name 'Cosmopolitan (C10N)'
            inceptionYear '2012'
            packaging 'jar'
            description 'A Java library, focused on making internationalisation more modular, ' +
                    'easier to evolve and maintain, robust-to-change and IDE-friendly without excess of external tools.'
            url 'http://rodionmoiseev.github.io/c10n/'

            scm {
                url 'scm:git@github.com:rodionmoiseev/c10n.git'
                connection 'scm:git@github.com:rodionmoiseev/c10n.git'
                developerConnection 'scm:git@github.com:rodionmoiseev/c10n.git'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'rodionmoiseev'
                    name 'Rodion Moiseev'
                    email 'rodion.moiseev+github@gmail.com'
                }
            }
        }
    }

    def propOrDefault = { String propertyName, String defValue ->
        return project.hasProperty(propertyName) ? project.property(propertyName) : defValue;
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                //Setup dummy credentials to sonatype to make sure the build passes.
                //If you have real credentials make sure to store them in
                //the $HOME/.gradle/gradle.properties file, to avoid accidentally
                //commiting them to the repo.
                def username = propOrDefault("sonatypeUsername", "anonymous")
                def password = propOrDefault("sonatypePassword", "secret")

                //Local repo for testing
                //repository(url: "file://localhost/Users/rodexion/work/local-repo/")

                /*
                 * sonatypeUserName as sonatypePassword come from $HOME/.gradle/gradle.properties
                 * (intentionally not on github)
                 */
                repository(url: project.releaseRepoUrl) {
                    authentication(userName: username, password: password)
                }

                snapshotRepository(url: project.snapshotRepoUrl) {
                    authentication(userName: username, password: password)
                }

                beforeDeployment { deployment ->
                    signing.signPom(deployment)
                }

                commonPom(pom)
            }
        }
    }

    /*
     * A hack to correct a bad dependency from c10n-tools to c10n-core
     */
    def installer = install.repositories.mavenInstaller
    def deployer = uploadArchives.repositories.mavenDeployer

    [installer, deployer]*.pom*.whenConfigured { pom ->
        pom.dependencies.find { dep ->
            if (dep.artifactId == 'c10n') {
                dep.artifactId = 'c10n-core'
            }
        }
    }

    test.exclude '**/AllTests.class'

    sourceSets.main.compileClasspath += configurations.provided
    eclipse.classpath.plusConfigurations += configurations.provided
    idea.module.scopes.PROVIDED.plus += [configurations.provided]
}

idea.project {
    vcs {
        vcs = 'Git'
        directory = '$PROJECT_DIR$/..'
    }
    copyright {
        name = 'Apache 2.0'
        license = file("${project.projectDir}/license-preamble.txt")
    }
}
